require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

platform :ios, '16.4' # Usar al menos iOS 16.4 para mejor compatibilidad con widgets
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'test1' do
  use_expo_modules!
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # Para soporte con hermes:
    :hermes_enabled => false,
    :fabric_enabled => false
  )

  # Mantengo ExpoModulesProvider (parece que lo estás usando según la estructura)
  pod 'ExpoModulesProvider', :path => './ExpoModulesProviders'

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )

    # Esto es para widgets y SwiftUI
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '16.4'
        
        # Arreglo para errores de Swift
        if target.respond_to?(:product_type) && target.product_type == "com.apple.product-type.bundle"
          target.build_configurations.each do |config|
            config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
          end
        end
      end
    end
  end
end

# Target para la extensión del widget
target 'EventWidgetExtension' do
  pod 'SwiftUI'
  pod 'WidgetKit'
  use_frameworks!  # Utiliza frameworks en vez de static libraries
end